program -> statement* EOF;

statement -> expressionStatement
			| printStatement
			| declarationStatement;

expressionStatement -> expression "\n";
printStatement -> "print" "(" expression ")" "\n";
declarationStatement -> TYPE IDENTIFIER ("=" expression)? "\n";

expression -> assignment;

assignment -> IDENTIFIER "=" ternary
			| ternary;

ternary -> binLogic "if" binLogic "else" binLogic;

binLogic -> negated (("and" | "or" | "xor" | "&&" | "||" | "^^" | "nand" | "nor" | "xnor") negated)*;

negated -> ("not" | "!") negated
		| comp;

comp -> conversion (("==" | "!=" | ">" | "<" | ">=" | "<=") conversion)*;

conversion -> bitwise ("as" TYPE)*;

bitwise -> term (("<<" | ">>" | "&" | "|" | "^") term)*;

term -> factor (("+" | "-") factor)*;

factor -> unary (("/" | "*" | "%") unary)*;

exp -> factor ("**" factor)*;

unary -> ("-" | "~") unary
		| primary;

primary -> NUM | STRING | BOOL | NULL
		| "(" expression ")"
		| IDENTIFIER;
